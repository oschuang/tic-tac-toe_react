{"version":3,"sources":["components/ButtonWrapper/Button/Button.js","components/ButtonWrapper/ButtonWrapper.js","components/Board/Column/MarkerSpan.js","components/Board/Column/Square.js","components/Board/Column/Column.js","components/Board/Board.js","components/Overlay/Overlay.js","utils/helpers.js","app/App.js","serviceWorker.js","index.js"],"names":["Button","mode","btnText","currentPlayer","onClick","realStatus","class","ButtonWrapper","toggleMode","restartGame","onePlayerBtn","twoPlayerBtn","newGameBtn","id","MarkerSpan","movesHistory","squaresHistory","squareNum","marker","indexOf","xSymbol","icon","faTimes","oSymbol","faCircle","color","className","Square","gameOver","makeMove","hardAI","activeStatus","includes","locked","backgroundColor","hoverColor","Promise","resolve","reject","then","setTimeout","Column","Board","Overlay","playAgain","resultMessage","display","getRandomNum","Math","floor","random","removeLastElem","arr","filter","num","index","length","getRemainingNum","winCombo","sharedNums","getSharedNums","arr1","arr2","forEach","push","App","props","state","xMoves","oMoves","gameBoard","1","2","3","4","5","6","7","8","9","bind","recordMove","changeTurn","checkWin","checkDraw","endGame","undoMove","eliminateWinCombo","getRandomSquare","defaultBoard","winningCombinations","mapWinCombos","Map","this","setState","nextMarker","nextPlayer","nextSquare","noMatch","keys","get","console","log","randomSquare","map","key","set","lastUsedSquare","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd399e0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = function( {mode, btnText, currentPlayer, onClick} ) {\r\n    //Give the appropriate mode btn active style and disable it from clicking\r\n    let status1 = mode === \"onePlayer\" ? \" active-btn disabled-btn\" : \"\";\r\n    let status2 = mode === \"twoPlayer\" ? \" active-btn disabled-btn \" : \"\";\r\n    //Disable New Game btn while awaiting CPU to make move (right after user move, and before CPU's move)\r\n    const cpuTurn = currentPlayer === \"Player O\" && mode === \"onePlayer\";\r\n    let statusNewGame = cpuTurn ? \" disabled-btn\" : \"\";\r\n    \r\n    let realStatus = \r\n        btnText === 'One Player' ? status1 :\r\n        btnText === 'Two Player' ? status2 :\r\n        btnText === \"New Game\" ? statusNewGame : \"\"\r\n    \r\n    return (\r\n      <button\r\n        class={'mode-btn' + realStatus}\r\n        onClick={onClick}>{btnText}</button>\r\n    )\r\n  }\r\n\r\n  export default Button;","import React from 'react';\r\nimport Button from './Button/Button';\r\n\r\nconst ButtonWrapper = function( {mode, btnText, currentPlayer, toggleMode, restartGame} ) {\r\n    /*\r\n    Buttons render based on status of mode\r\n    Game begins by default on one player mode\r\n    There are three conditions:\r\n    1. One player mode: Left Button: One Player; Right Button: New Game\r\n    2. Two player mode: L: New Game; R: Two Player\r\n    3. Null (user clicked New Game button): L: One Player; R: Two Player\r\n    \r\n    Player must choose a Game Mode to start the game.\r\n    Once a mode is changed, the setting is locked unless the user selects New Game.\r\n    */\r\n    const onePlayerBtn = \r\n          <Button\r\n            btnText=\"One Player\"\r\n            onClick={ () => { toggleMode('onePlayer') }}\r\n            mode={mode} />\r\n          \r\n    const twoPlayerBtn =\r\n          <Button\r\n            btnText=\"Two Player\"\r\n            onClick={ () => { toggleMode('twoPlayer') }}\r\n            mode={mode} />\r\n          \r\n    const newGameBtn = \r\n          <Button\r\n            btnText=\"New Game\"\r\n            onClick={restartGame}\r\n            mode={mode}\r\n            currentPlayer={currentPlayer} />\r\n          \r\n    const getLeftButton = function() {\r\n      if (mode === 'onePlayer' || mode === null) {\r\n        return onePlayerBtn;\r\n      } else if (mode === 'twoPlayer') {\r\n        return newGameBtn;\r\n      }\r\n    }\r\n    \r\n    const getRightButton = function() {\r\n      if (mode === 'onePlayer') {\r\n        return newGameBtn;\r\n      } else if (mode === 'twoPlayer' || mode === null) {\r\n        return twoPlayerBtn;\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <div id='mode-btn-wrapper'>\r\n        {getLeftButton()}\r\n        {getRightButton()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default ButtonWrapper;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'; \r\nimport { faCircle } from '@fortawesome/free-regular-svg-icons'; \r\n\r\nconst MarkerSpan = function( {movesHistory, squaresHistory, squareNum} ) {\r\n    //Destructuring done by passing in as argument through function\r\n    // const {movesHistory, squaresHistory, squareNum} = props;\r\n    const marker = movesHistory[squaresHistory.indexOf(squareNum)];\r\n    const xSymbol = <FontAwesomeIcon icon={faTimes} />;//<i className=\"fas fa-times\"></i>\r\n    const oSymbol = <FontAwesomeIcon icon={faCircle} />;//<i className=\"far fa-circle\"></i>\r\n  \r\n    let icon = marker === \"X\" ? xSymbol : marker === \"O\" ? oSymbol : \"\";\r\n    let color = marker === \"X\" ? \"red-span\" : \"blue-span\";\r\n    \r\n    return (\r\n      <span \r\n        className={'marker-span ' + color}\r\n        movesHistory={movesHistory} squaresHistory={squaresHistory}>\r\n        {icon}\r\n      </span>\r\n    )\r\n  }\r\n\r\n  export default MarkerSpan;","import React from 'react';\r\nimport MarkerSpan from './MarkerSpan';\r\n\r\nconst Square = function( {movesHistory, squaresHistory, squareNum, currentPlayer, gameOver, mode, makeMove, hardAI} ) {\r\n    const marker = movesHistory[squaresHistory.indexOf(squareNum)];\r\n    const usedSquare = squaresHistory.includes(squareNum);\r\n    const cpuTurn = currentPlayer === \"Player O\" && mode === \"onePlayer\";\r\n    \r\n    //Disable square if; 1) already filled, 2) game has ended, 3) while awaiting CPU turn\r\n    let activeStatus = usedSquare || gameOver || cpuTurn ? \"disabled-square\" : \"\";\r\n    //Disable and dim all squares on beginning bc user must select mode first\r\n    let locked = mode === null ? \"locked-square-start\" : \"\";\r\n    \r\n    //Square bg and hover color changes based on 'X' or 'O'\r\n    let backgroundColor = marker === 'X' ? 'red-square' : marker === 'O' ? 'blue-square' : \"\";\r\n    let hoverColor = currentPlayer === 'Player X' ? \"hover-x\" : currentPlayer === 'Player O' ? \"hover-o\" : \"\";\r\n    \r\n    /*\r\n    Main logic for how game runs\r\n    One Player Mode:\r\n      1. Player X makes move\r\n      (promise gets resolved ---> runs .then())\r\n      2. CPU (Player O) makes move\r\n    Two Player mode:\r\n      1. Player X makes move\r\n      2. Player O makes move\r\n    */\r\n    function runGame() {\r\n      const gamePromise = new Promise( (resolve, reject) => {\r\n        makeMove(squareNum);\r\n        // console.log(\"Player has made their move\");\r\n        if (mode === 'onePlayer') {\r\n          //Resolves only on one player mode cause AI only runs on one player mode\r\n          resolve();\r\n        }\r\n      })\r\n      .then( () => {\r\n        // console.log(\"CPU's turn\");\r\n        setTimeout(hardAI, 350);\r\n      })\r\n    }\r\n    \r\n    return (\r\n      <div \r\n        className={\"square \" + activeStatus + \" \" + backgroundColor + \" \" + hoverColor + \" \" + locked}\r\n        onClick={runGame} >\r\n          <MarkerSpan \r\n            squareNum={squareNum} \r\n            movesHistory={movesHistory} squaresHistory={squaresHistory} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst Column = function( {movesHistory, squaresHistory, squareNum, currentPlayer, gameOver, mode, makeMove, hardAI} ) {\r\n    return (\r\n      <div className=\"column\">\r\n        <Square \r\n          squareNum={squareNum + 1}\r\n          currentPlayer={currentPlayer} gameOver={gameOver} mode={mode}\r\n          makeMove={makeMove} \r\n          movesHistory={movesHistory} squaresHistory={squaresHistory}\r\n          hardAI={hardAI} />\r\n        <Square \r\n          squareNum={squareNum + 2}\r\n          currentPlayer={currentPlayer} gameOver={gameOver} mode={mode}\r\n          makeMove={makeMove} \r\n          movesHistory={movesHistory} squaresHistory={squaresHistory}\r\n          hardAI={hardAI} />\r\n        <Square \r\n          squareNum={squareNum + 3}\r\n          currentPlayer={currentPlayer} gameOver={gameOver} mode={mode}\r\n          makeMove={makeMove} \r\n          movesHistory={movesHistory} squaresHistory={squaresHistory}\r\n          hardAI={hardAI} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Column;","import React from 'react';\r\nimport Column from './Column/Column';\r\n\r\nconst Board = function( {movesHistory, squaresHistory, squareNum, currentPlayer, gameOver, mode, makeMove, hardAI} ) {\r\n    return (\r\n      <div id=\"board\">\r\n        <Column\r\n          squareNum={0}\r\n          currentPlayer={currentPlayer} gameOver={gameOver} mode={mode}\r\n          makeMove={makeMove} \r\n          movesHistory={movesHistory} squaresHistory={squaresHistory}\r\n          hardAI={hardAI} />\r\n        <Column \r\n          squareNum={3}\r\n          currentPlayer={currentPlayer} gameOver={gameOver} mode={mode}\r\n          makeMove={makeMove} \r\n          movesHistory={movesHistory} squaresHistory={squaresHistory}\r\n          hardAI={hardAI} />\r\n        <Column \r\n          squareNum={6}\r\n          currentPlayer={currentPlayer} gameOver={gameOver} mode={mode}\r\n          makeMove={makeMove} \r\n          movesHistory={movesHistory} squaresHistory={squaresHistory}\r\n          hardAI={hardAI} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Board;","import React from 'react';\r\n\r\n//Appears at end of a game; Has no child components\r\nconst Overlay = function( {gameOver, mode, playAgain, restartGame, resultMessage} ) {\r\n    let display = gameOver ? \"\" : \"hidden\";\r\n    \r\n    return (\r\n      <div class={\"overlay \" + display}>\r\n        <div class=\"overlay-content-wrapper\">\r\n  \r\n          <span class='overlay-span'>{resultMessage}</span>\r\n          <span class='overlay-span'>Play again?</span>\r\n          <div id='overlay-btn-wrapper'>\r\n            <button\r\n              class=\"overlay-btn\"\r\n              onClick={() => playAgain(mode)}>YES</button>\r\n            <button\r\n              class=\"overlay-btn\"\r\n              onClick={restartGame}>NO</button>\r\n          </div>\r\n  \r\n        </div>\r\n      </div> \r\n    )\r\n  }\r\n\r\n  export default Overlay;\r\n  ","//returns num b/t 1-9 inclusive\r\nexport function getRandomNum() {\r\n    return Math.floor(Math.random() * (9)) + 1;\r\n  }\r\n  \r\n  //removes last elem from arr and returns the new arr\r\nexport function removeLastElem(arr) {\r\n    let filtered = arr.filter( (num, index) => {\r\n      return index !== arr.length - 1;\r\n    })\r\n    return filtered;\r\n  }\r\n  \r\nexport function getRemainingNum(winCombo, sharedNums) {\r\n      //filters the winning combo out for used up nums to get remaining num that would complete the combo ex. [4, 5, 6] and [5, 6] ---> 4\r\n      let filter = winCombo.filter(num => {\r\n        return !sharedNums.includes(num)\r\n    })\r\n    let remainingNum = filter[0];\r\n    return remainingNum;\r\n  }\r\n  \r\nexport function getSharedNums(arr1, arr2) {\r\n    //Stores nums shared between the combo and X Moves ex. combo: [5, 4, 6] and xMoves: [2, 3, 4, 6] => [4,6]\r\n    let sharedNums = [];\r\n    //Compare the nums in winCombo with X's moves\r\n    arr2.forEach(num => {\r\n      if (arr1.includes(num)) {\r\n        sharedNums.push(num);\r\n      }\r\n    })\r\n    return sharedNums;\r\n  }","import React from 'react';\r\nimport './App.css';\r\n\r\nimport ButtonWrapper from '../components/ButtonWrapper/ButtonWrapper';\r\nimport Board from '../components/Board/Board';\r\nimport Overlay from '../components/Overlay/Overlay';\r\n\r\nimport { getRandomNum, removeLastElem, getRemainingNum, getSharedNums } from '../utils/helpers';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      //Symbol to be rendered, starts with X\r\n      mode: 'onePlayer',\r\n      marker: \"X\",\r\n      //Order of what # squares were used up\r\n      squaresHistory: [], //[4, 2, 6],\r\n      //Order of player/CPU movesHistory, either \"X\" or \"O\", matches with squaresHistory\r\n      movesHistory: [], //['x', 'o', 'x'],\r\n      currentPlayer: \"Player X\",\r\n      xMoves: [],\r\n      oMoves: [],\r\n      gameOver: false,\r\n      resultMessage: \"\",\r\n      // turnHistory: [],\r\n      //Stores square num and what marker it holds; starts with placeholder values; is iterated over to check for a win\r\n      gameBoard: {\r\n        1: 'A',\r\n        2: 'B',\r\n        3: 'C',\r\n        4: 'D',\r\n        5: 'E',\r\n        6: 'F',\r\n        7: 'G',\r\n        8: 'H',\r\n        9: 'I'\r\n      },\r\n      \r\n    }\r\n    \r\n    this.toggleMode = this.toggleMode.bind(this);\r\n    this.makeMove = this.makeMove.bind(this);\r\n    this.recordMove = this.recordMove.bind(this);\r\n    this.changeTurn = this.changeTurn.bind(this);\r\n    this.checkWin = this.checkWin.bind(this);\r\n    this.checkDraw = this.checkDraw.bind(this);\r\n    this.endGame = this.endGame.bind(this);\r\n    this.hardAI = this.hardAI.bind(this);\r\n    this.playAgain = this.playAgain.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.undoMove = this.undoMove.bind(this);\r\n    this.eliminateWinCombo = this.eliminateWinCombo.bind(this);\r\n    this.getRandomSquare = this.getRandomSquare.bind(this);\r\n    \r\n    this.defaultBoard = {\r\n        1: 'A',\r\n        2: 'B',\r\n        3: 'C',\r\n        4: 'D',\r\n        5: 'E',\r\n        6: 'F',\r\n        7: 'G',\r\n        8: 'H',\r\n        9: 'I'\r\n      }\r\n    \r\n    this.winningCombinations = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [3, 6, 9],\r\n        [1, 5, 9],\r\n        [3, 5, 7]\r\n      ]\r\n    \r\n    this.mapWinCombos = new Map( [\r\n        [ [1, 2, 3], true ],\r\n        [ [4, 5, 6], true ],\r\n        [ [7, 8, 9], true ],\r\n        [ [1, 4, 7], true ],\r\n        [ [2, 5, 8], true ],\r\n        [ [3, 6, 9], true ],\r\n        [ [1, 5, 9], true ],\r\n        [ [3, 5, 7], true ]\r\n      ] );\r\n    \r\n  }\r\n  \r\n  \r\n  toggleMode(mode) {\r\n    this.setState({\r\n      mode: mode\r\n    });\r\n  }\r\n  \r\n  ////FUNCTIONS FOR MAKING A MOVE\r\n  //***PRIMARY function, runs on click\r\n makeMove(squareNum) {\r\n    const promise = new Promise( (resolve, reject) => {\r\n      this.recordMove(squareNum);\r\n      this.setState({\r\n        gameBoard: {...this.state.gameBoard, [squareNum]: this.state.marker}\r\n      })\r\n      resolve()\r\n    })\r\n      .then( () => {\r\n          this.checkWin();\r\n      })\r\n      .then( () => {\r\n        if (this.state.movesHistory.length === 9) {\r\n          this.checkDraw();\r\n        }\r\n      })\r\n      .then( () => {\r\n        if (!this.state.gameOver) {\r\n          this.changeTurn();\r\n        }\r\n      })\r\n  }\r\n  \r\n  //records moves to movesHistory and squaresHistory\r\n  recordMove(squareNum) {\r\n    this.setState({\r\n      movesHistory: [...this.state.movesHistory, this.state.marker],\r\n      squaresHistory: [...this.state.squaresHistory, squareNum],\r\n    })\r\n    \r\n    if (this.state.marker === 'X') {\r\n      this.setState({\r\n        xMoves: [...this.state.xMoves, squareNum]\r\n      })\r\n    } else {\r\n      this.setState({\r\n        oMoves: [...this.state.oMoves, squareNum]\r\n      })\r\n    }\r\n  }\r\n\r\n  changeTurn() {\r\n    let nextMarker = this.state.marker === 'X' ? 'O' : 'X';\r\n    let nextPlayer = this.state.currentPlayer === 'Player X' ? \"Player O\" : \"Player X\";\r\n    this.setState({\r\n      marker: nextMarker,\r\n      currentPlayer: nextPlayer\r\n    })\r\n  }\r\n  \r\n  checkWin() {\r\n    const {gameBoard, currentPlayer} = this.state;\r\n    this.winningCombinations.forEach(arr => {\r\n      if (gameBoard[arr[0]] === gameBoard[arr[1]] && \r\n          gameBoard[arr[0]] === gameBoard[arr[2]]) {\r\n        this.endGame();\r\n        this.setState({\r\n          resultMessage: `${currentPlayer} wins!`\r\n        })\r\n      }\r\n    })\r\n  }\r\n  \r\n  checkDraw() {\r\n    //Only runs if board filled up and no winner was found\r\n    if (!this.state.gameOver) {\r\n      this.endGame();\r\n      this.setState({\r\n          resultMessage: \"It's a draw!\"\r\n      })\r\n    }\r\n  }\r\n  \r\n  endGame() {\r\n    this.setState({\r\n      gameOver: true\r\n    })\r\n  }\r\n  //////////////////\r\n  \r\n  /*\r\n  AI runs 3 ways:\r\n  1. On the very first move: picks a random square\r\n  2. After that, it picks moves based on opponent's X's. \r\n     If the AI finds that X can win on their next turn, the AI will make a move to stop X.\r\n  3. Otherwise, if a potential win is not detected, the AI will just pick a random move\r\n  */\r\n  hardAI() {\r\n    //Used this condition otherwise game keeps running even after board is filled up (timeout/async issue)\r\n    if (!this.state.gameOver) {\r\n      const {oMoves, xMoves} = this.state;\r\n      const {mapWinCombos, eliminateWinCombo, makeMove, getRandomSquare} = this;\r\n      let noMatch = true;\r\n      let nextSquare;\r\n      const firstMove = oMoves.length < 1;\r\n      \r\n      //Condition One\r\n      if (firstMove) {\r\n        noMatch = false;\r\n        nextSquare = getRandomSquare();\r\n      } \r\n      //Condition Two: X can win next turn, so AI must stop X\r\n      else {\r\n        for (let winCombo of mapWinCombos.keys()) {\r\n          if (mapWinCombos.get(winCombo)) {\r\n            let sharedNums = getSharedNums(winCombo, xMoves);\r\n            const winComboFound = getSharedNums(winCombo, xMoves).length === 2;\r\n            if (winComboFound) {\r\n              noMatch = false;\r\n              nextSquare = getRemainingNum(winCombo, sharedNums);\r\n              console.log('combo found')\r\n              //Stop checking over remaining combos since a move was made; this stops it from making more than one move at a time\r\n              break; \r\n            }\r\n          }\r\n        }\r\n      }\r\n      //Condition Three: Not first move, and X can't win next turn\r\n      if (noMatch) {\r\n        nextSquare = getRandomSquare();\r\n      }\r\n      makeMove(nextSquare);\r\n      eliminateWinCombo(nextSquare, mapWinCombos);\r\n    }\r\n  }\r\n  \r\n  getRandomSquare() {\r\n    let randomSquare = getRandomNum();\r\n    // console.log(this.state.squaresHistory)\r\n    // console.log(randomSquare)    \r\n    if (this.state.squaresHistory.includes(randomSquare)) {\r\n      // console.log(\"getting new number...\")\r\n      while (this.state.squaresHistory.includes(randomSquare)) {\r\n        randomSquare = getRandomNum();\r\n      }\r\n    }\r\n    return randomSquare;\r\n  }\r\n  \r\n  //if a square was used, then any combo that uses it is no longer viable, so eliminate it from checking\r\n  eliminateWinCombo(squareNum, map) {\r\n    for (let key of map.keys()) {\r\n      if (key.includes(squareNum) && map.get(key)) {\r\n        map.set(key, false)\r\n      }\r\n    }\r\n  }\r\n\r\n  //Need to fix cause of Map\r\n  undoMove() {\r\n    const {marker, squaresHistory, movesHistory, gameBoard, xMoves, oMoves, gameOver} = this.state;\r\n    let lastUsedSquare = squaresHistory[squaresHistory.length - 1];\r\n    if (movesHistory.length > 0 && !gameOver) {\r\n      this.changeTurn();\r\n      this.setState({\r\n        //Remove last recorded move\r\n        squaresHistory: removeLastElem(squaresHistory), \r\n        movesHistory: removeLastElem(movesHistory),\r\n        xMoves: marker === 'O' ? removeLastElem(xMoves) : xMoves,\r\n        oMoves: marker === 'X' ? removeLastElem(oMoves) : oMoves,\r\n        //Reset last used square to its default placeholder value\r\n        gameBoard: {\r\n          ...gameBoard, [lastUsedSquare]: this.defaultBoard[lastUsedSquare]\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  restartGame() {\r\n    //Reset all values to default\r\n    this.setState({\r\n      currentPlayer: \"Player X\",\r\n      marker: \"X\",\r\n      squaresHistory: [],\r\n      movesHistory: [],\r\n      gameBoard: {\r\n        1: 'A',\r\n        2: 'B',\r\n        3: 'C',\r\n        4: 'D',\r\n        5: 'E',\r\n        6: 'F',\r\n        7: 'G',\r\n        8: 'H',\r\n        9: 'I'\r\n      },\r\n      xMoves: [],\r\n      oMoves: [],\r\n      gameOver: false,\r\n      mode: null,\r\n    })\r\n    this.mapWinCombos = new Map( [\r\n        [ [1, 2, 3], true ],\r\n        [ [4, 5, 6], true ],\r\n        [ [7, 8, 9], true ],\r\n        [ [1, 4, 7], true ],\r\n        [ [2, 5, 8], true ],\r\n        [ [3, 6, 9], true ],\r\n        [ [1, 5, 9], true ],\r\n        [ [3, 5, 7], true ]\r\n      ] );\r\n  }\r\n  \r\n  playAgain(mode) {\r\n    this.restartGame();\r\n    this.setState({\r\n      mode: mode\r\n    })\r\n  }\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 class='header'>Play Tic Tac Toe</h1>\r\n        <ButtonWrapper\r\n          mode={this.state.mode}\r\n          currentPlayer={this.state.currentPlayer}\r\n          toggleMode={this.toggleMode}\r\n          restartGame={this.restartGame} />\r\n        <Board \r\n          mode={this.state.mode} gameOver={this.state.gameOver}\r\n          currentPlayer={this.state.currentPlayer}\r\n          makeMove={this.makeMove} \r\n          hardAI={this.hardAI}\r\n          movesHistory={this.state.movesHistory} \r\n          squaresHistory={this.state.squaresHistory} />\r\n        <Overlay \r\n          mode={this.state.mode}\r\n          gameOver={this.state.gameOver}\r\n          playAgain={this.playAgain} \r\n          restartGame={this.restartGame} \r\n          resultMessage={this.state.resultMessage} />\r\n        \r\n        {/* \r\n        <button onClick={this.undoMove}>UNDO MOVE</button>\r\n        */\r\n        }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//***Helper Functions***\r\n//returns num b/t 1-9 inclusive\r\n\r\n\r\n/*\r\nTO-DO:\r\n\r\n- Fix Undo Move function\r\n- Change AI so that it acts offensively (detects possibility to win, use another Map with oMoves?)\r\n\r\nOther:\r\n- Let players choose their symbol\r\n- Easy/med/hard AI opponents\r\n\r\n*/\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}